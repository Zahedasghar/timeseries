{
  "hash": "558822ac098ea8810f6ac62f5dd488e4",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n## Understanding the Impact of Exchange Rates on Pakistan's Exports\n\nIn this blog, we explore the intricate relationship between exchange rates and export performance in Pakistan, using economic theory, data visualization, and statistical analysis in R.\n\n### Introduction\n\nBriefly introduce the topic, its economic significance, and the peculiar case of Pakistan where traditional economic expectations do not always align with observed data trends.\n\n### Economic Theory Behind Exchange Rates and Exports\n\nProvide a detailed explanation of how exchange rates are expected to influence exports:\n\n1. **Competitiveness**\n   - Discuss how depreciation makes goods cheaper internationally, potentially boosting exports, and vice versa.\n\n2. **Pricing and Profits**\n   - Explain how exchange rate fluctuations can affect exporter profits by altering the value of foreign earnings when converted to local currency.\n\n3. **Cost of Inputs**\n   - Mention how a weaker currency can increase the cost of imported inputs, potentially negating some benefits of a depreciated currency.\n\n### Factors Complicating the Exchange Rate-Export Relationship\n\nHighlight the complexities in the relationship which might explain the anomalies in the Pakistan scenario:\n\n- **Elasticity of Demand**\n- **Global Economic Conditions**\n- **Structural and Policy Issues**\n- **Long-term Contracts and Pricing in USD**\n\n### Data Preparation and Analysis with R\n\nEmbed the R code used for data loading, cleaning, and preparation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.2.1     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyquant)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: PerformanceAnalytics\nLoading required package: xts\nLoading required package: zoo\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: 'xts'\n\nThe following objects are masked from 'package:dplyr':\n\n    first, last\n\n\nAttaching package: 'PerformanceAnalytics'\n\nThe following object is masked from 'package:graphics':\n\n    legend\n\nLoading required package: quantmod\nLoading required package: TTR\n\nAttaching package: 'TTR'\n\nThe following object is masked from 'package:dials':\n\n    momentum\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(timetk)\nlibrary(modeltime)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'modeltime'\n\nThe following object is masked from 'package:TTR':\n\n    growth\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(zoo)\nlibrary(boot)\n\n# Code to load and clean data\ndf_exports_raw <- read_csv('data/total_export_receipts_krndaz.csv', skip = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 174 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Monthly\ndbl (1): US$  (Millions)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndf_exports <- df_exports_raw %>%\n  rename(date = Monthly, exports = `US$  (Millions)`) %>%\n  mutate(date = as.yearmon(date, format = \"%b %Y\")) %>%\n  mutate(exports = str_remove_all(exports, \"[^0-9\\\\.]+\")) %>%\n  mutate(exports = as.numeric(exports)) %>%\n  drop_na() %>%\n  mutate(exports = exports / lag(exports) - 1) %>%\n  drop_na()\n\n# Continue with the loading and cleaning of exchange rate and KSE-100 index data\n```\n:::\n\n\n\n## Other data sets\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_usdpkr <- \n  tq_get(\"PKR=x\", to = \"2024-07-01\") %>% \n  tq_transmute(select = \"close\",\n               mutate_fun = to.monthly) %>% \n  tq_transmute(mutate_fun = periodReturn,\n               period = \"monthly\",\n               col_rename = \"usd_pkr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in to.period(x, \"months\", indexAt = indexAt, name = name, ...): missing\nvalues removed from data\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print to verify the data\nprint(\"USD/PKR Data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"USD/PKR Data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(df_usdpkr))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  date       usd_pkr\n  <yearmon>    <dbl>\n1 Jan 2014   0      \n2 Feb 2014  -0.00493\n3 Mar 2014  -0.0667 \n4 Apr 2014   0.00613\n5 May 2014   0.00102\n6 Jun 2014   0.00101\n```\n\n\n:::\n\n```{.r .cell-code}\n# Monthly change (%) of KSE-100 index\n# https://finance.yahoo.com/quote/%5EKSE/\ndf_kse100 <- \n  tq_get(\"^KSE\", to = \"2024-07-01\") %>% \n  tq_transmute(select = \"close\",\n               mutate_fun = to.monthly) %>% \n  tq_transmute(mutate_fun = periodReturn,\n               period = \"monthly\",\n               col_rename = \"kse100\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in to.period(x, \"months\", indexAt = indexAt, name = name, ...): missing\nvalues removed from data\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print to verify the data\nprint(\"KSE-100 Data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"KSE-100 Data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(df_kse100))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  date        kse100\n  <yearmon>    <dbl>\n1 Jan 2014   0      \n2 Feb 2014  -0.0374 \n3 Mar 2014   0.0534 \n4 Apr 2014   0.0645 \n5 May 2014   0.0285 \n6 Jun 2014  -0.00286\n```\n\n\n:::\n\n```{.r .cell-code}\n# Merging series\ndf_merged <- \n  df_exports %>% \n  left_join(df_usdpkr, by = \"date\") %>% \n  left_join(df_kse100, by = \"date\") %>% \n  drop_na()\n\n# Print to verify the merged data\nprint(\"Merged Data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Merged Data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(df_merged))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  date      exports  usd_pkr   kse100\n  <yearmon>   <dbl>    <dbl>    <dbl>\n1 Sep 2021   0.106   0.0297  -0.0531 \n2 Aug 2021  -0.110   0.0277   0.00775\n3 Jul 2021  -0.0449  0.0195  -0.00635\n4 Jun 2021   0.115   0.0327   0.00487\n5 May 2021  -0.145  -0.00201  0.0647 \n6 Apr 2021   0.0817  0.00551 -0.00730\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Visualizing Data\n\nIncorporate the `ggplot2` visualizations that depict the relationship over time:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plotting code to visualize monthly percentage changes\ndf_merged %>% \n  pivot_longer(-date, names_to = \"vars\") %>%\n  ggplot(aes(date, value, color = vars)) +\n  geom_line() +\n  labs(subtitle = \"Monthly percentage changes in exports, USD/PKR exchange rates, and KSE-100 index\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0.\nℹ Please use the `transform` argument instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](export_exchange_rate_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Statistical Analysis\n\nEmbed the code for regression and bootstrap analysis to statistically examine the effects of exchange rates on exports:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for the last 10 years\nstart_date <- as.yearmon(Sys.Date()) - 10\ndf_merged_filtered <- df_merged %>% filter(date >= start_date)\n\n# Print to verify the filtered data\nprint(\"Filtered Merged Data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Filtered Merged Data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(df_merged_filtered))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  date      exports  usd_pkr   kse100\n  <yearmon>   <dbl>    <dbl>    <dbl>\n1 Sep 2021   0.106   0.0297  -0.0531 \n2 Aug 2021  -0.110   0.0277   0.00775\n3 Jul 2021  -0.0449  0.0195  -0.00635\n4 Jun 2021   0.115   0.0327   0.00487\n5 May 2021  -0.145  -0.00201  0.0647 \n6 Apr 2021   0.0817  0.00551 -0.00730\n```\n\n\n:::\n\n```{.r .cell-code}\n# Determine the last date in the dataset\nend_date <- max(df_merged_filtered$date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bootstrap confidence intervals using the `boot` package\nset.seed(12345)\n\n# Define the regression function\nregression_function <- function(data, indices) {\n  d <- data[indices, ]  # allows boot to select sample\n  fit <- glm(exports ~ usd_pkr, data = d)\n  return(coef(fit))\n}\n\n# Bootstrapping\nboot_results <- boot(data = df_merged_filtered, statistic = regression_function, R = 1000)\n\n# Extract bootstrap estimates\nboot_estimates <- boot_results$t\n\n# Create a data frame for plotting\nboot_df <- as.data.frame(boot_estimates)\ncolnames(boot_df) <- names(coef(glm(exports ~ usd_pkr, data = df_merged_filtered)))\n\n# Plotting the bootstrap confidence intervals\nboot_df %>%\n  pivot_longer(cols = everything(), names_to = \"term\", values_to = \"estimate\") %>%\n  ggplot(aes(estimate, fill = term)) +\n  geom_vline(xintercept = 0, size = 1.5, lty = 2, color = \"gray50\") +\n  geom_histogram(alpha = 0.8, show.legend = FALSE) +\n  labs(x = \"\", \n       y = \"\",\n       subtitle = \"The distribution includes zero which means there is no significant effect\",\n       title = \"The estimated effect of USD/PKR rates on exports in Pakistan\") +\n  theme_minimal(base_size = 16) +\n  theme(axis.text = element_text(size = 16),\n        plot.title = element_text(size = 16))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](export_exchange_rate_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### Discussion of Findings\n\nDiscuss the results from the visual and statistical analysis, highlighting any insights or contradictions observed in the context of economic theories and the peculiar economic environment of Pakistan.\n\n### Conclusion\n\nConclude with a summary of findings, their implications for economic policy and business practice in Pakistan, and suggestions for future research.\n\n### Further Analysis (Optional)\n\nOptionally, suggest further lines of inquiry or different methodological approaches that might provide additional insights, such as sector-specific analyses or the impact of macroeconomic indicators other than exchange rates.\n",
    "supporting": [
      "export_exchange_rate_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}