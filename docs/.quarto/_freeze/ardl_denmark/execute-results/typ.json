{
  "hash": "b3ff56bc383dfdee82c9a9a71d40605b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ARDL Model for Denmark\"\nformat: typst\n---\n\n\n\n## Basic Example \n\nThis is a basic example which shows how to use the main functions of the ARDL package.\n\nAssume that we want to model the LRM (logarithm of real money, M2) as a function of LRY, IBO and IDE (see ?denmark). The problem is that applying an OLS regression on non-stationary data would result into a spurious regression. The estimated parameters would be consistent only if the series were cointegrated. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ARDL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTo cite the ARDL package in publications:\n\nUse this reference to refer to the validity of the ARDL package.\n\n  Natsiopoulos, Kleanthis, and Tzeremes, Nickolaos G. (2022). ARDL\n  bounds test for cointegration: Replicating the Pesaran et al. (2001)\n  results for the UK earnings equation using R. Journal of Applied\n  Econometrics, 37(5), 1079-1090. https://doi.org/10.1002/jae.2919\n\nUse this reference to cite this specific version of the ARDL package.\n\n  Kleanthis Natsiopoulos and Nickolaos Tzeremes (2023). ARDL: ARDL, ECM\n  and Bounds-Test for Cointegration. R package version 0.2.4.\n  https://CRAN.R-project.org/package=ARDL\n```\n\n\n:::\n\n```{.r .cell-code}\ndata(denmark)\n```\n:::\n\n\n\nFirst, we find the best ARDL specification. We search up to order 5.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels <- auto_ardl(LRM ~ LRY + IBO + IDE, data = denmark, max_order = 5)\n\n# The top 20 models according to the AIC\nmodels$top_orders\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   LRM LRY IBO IDE       AIC\n1    3   1   3   2 -251.0259\n2    3   1   3   3 -250.1144\n3    2   2   0   0 -249.6266\n4    3   2   3   2 -249.1087\n5    3   2   3   3 -248.1858\n6    2   2   0   1 -247.7786\n7    2   1   0   0 -247.5643\n8    2   2   1   1 -246.6885\n9    3   3   3   3 -246.3061\n10   2   2   1   2 -246.2709\n11   2   1   1   1 -245.8736\n12   2   2   2   2 -245.7722\n13   1   1   0   0 -245.6620\n14   2   1   2   2 -245.1712\n15   3   1   2   2 -245.0996\n16   1   0   0   0 -244.4317\n17   1   1   0   1 -243.7702\n18   5   5   5   5 -243.3120\n19   4   1   3   2 -243.0728\n20   4   1   3   3 -242.4378\n```\n\n\n:::\n:::\n\n\n\nThe best model is the one with the lowest AIC. We can also plot the AIC values for each model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The best model was found to be the ARDL(3,1,3,2)\nardl_3132 <- models$best_model\nardl_3132$order\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLRM LRY IBO IDE \n  3   1   3   2 \n```\n\n\n:::\n\n```{.r .cell-code}\n#> LRM LRY IBO IDE \n#>   3   1   3   2\nsummary(ardl_3132)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTime series regression with \"zooreg\" data:\nStart = 1974 Q4, End = 1987 Q3\n\nCall:\ndynlm::dynlm(formula = full_formula, data = data, start = start, \n    end = end)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.029939 -0.008856 -0.002562  0.008190  0.072577 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   2.6202     0.5678   4.615 4.19e-05 ***\nL(LRM, 1)     0.3192     0.1367   2.336 0.024735 *  \nL(LRM, 2)     0.5326     0.1324   4.024 0.000255 ***\nL(LRM, 3)    -0.2687     0.1021  -2.631 0.012143 *  \nLRY           0.6728     0.1312   5.129 8.32e-06 ***\nL(LRY, 1)    -0.2574     0.1472  -1.749 0.088146 .  \nIBO          -1.0785     0.3217  -3.353 0.001790 ** \nL(IBO, 1)    -0.1062     0.5858  -0.181 0.857081    \nL(IBO, 2)     0.2877     0.5691   0.505 0.616067    \nL(IBO, 3)    -0.9947     0.3925  -2.534 0.015401 *  \nIDE           0.1255     0.5545   0.226 0.822161    \nL(IDE, 1)    -0.3280     0.7213  -0.455 0.651847    \nL(IDE, 2)     1.4079     0.5520   2.550 0.014803 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0191 on 39 degrees of freedom\nMultiple R-squared:  0.988,\tAdjusted R-squared:  0.9843 \nF-statistic: 266.8 on 12 and 39 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\nThen we can estimate the UECM (Unrestricted Error Correction Model) of the underlying ARDL(3,1,3,2).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuecm_3132 <- uecm(ardl_3132)\nsummary(uecm_3132)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTime series regression with \"zooreg\" data:\nStart = 1974 Q4, End = 1987 Q3\n\nCall:\ndynlm::dynlm(formula = full_formula, data = data, start = start, \n    end = end)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.029939 -0.008856 -0.002562  0.008190  0.072577 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   2.62019    0.56777   4.615 4.19e-05 ***\nL(LRM, 1)    -0.41685    0.09166  -4.548 5.15e-05 ***\nL(LRY, 1)     0.41538    0.11761   3.532  0.00108 ** \nL(IBO, 1)    -1.89172    0.39111  -4.837 2.09e-05 ***\nL(IDE, 1)     1.20534    0.44690   2.697  0.01028 *  \nd(L(LRM, 1)) -0.26394    0.10192  -2.590  0.01343 *  \nd(L(LRM, 2))  0.26867    0.10213   2.631  0.01214 *  \nd(LRY)        0.67280    0.13116   5.129 8.32e-06 ***\nd(IBO)       -1.07852    0.32170  -3.353  0.00179 ** \nd(L(IBO, 1))  0.70701    0.46874   1.508  0.13953    \nd(L(IBO, 2))  0.99468    0.39251   2.534  0.01540 *  \nd(IDE)        0.12546    0.55445   0.226  0.82216    \nd(L(IDE, 1)) -1.40786    0.55204  -2.550  0.01480 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0191 on 39 degrees of freedom\nMultiple R-squared:  0.7458,\tAdjusted R-squared:  0.6676 \nF-statistic: 9.537 on 12 and 39 DF,  p-value: 3.001e-08\n```\n\n\n:::\n:::\n\n\n\nAnd also the RECM (Restricted Error Correction Model) of the underlying \nARDL(3,1,3,2), allowing the constant to join the long-run relationship (case 2), instead of the short-run (case 3).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecm_3132 <- recm(uecm_3132, case = 2)\nsummary(recm_3132)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTime series regression with \"zooreg\" data:\nStart = 1974 Q4, End = 1987 Q3\n\nCall:\ndynlm::dynlm(formula = full_formula, data = data, start = start, \n    end = end)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.029939 -0.008856 -0.002562  0.008190  0.072577 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \nd(L(LRM, 1)) -0.26394    0.09008  -2.930 0.005405 ** \nd(L(LRM, 2))  0.26867    0.09127   2.944 0.005214 ** \nd(LRY)        0.67280    0.11591   5.805 7.03e-07 ***\nd(IBO)       -1.07852    0.30025  -3.592 0.000837 ***\nd(L(IBO, 1))  0.70701    0.44359   1.594 0.118300    \nd(L(IBO, 2))  0.99468    0.36491   2.726 0.009242 ** \nd(IDE)        0.12546    0.48290   0.260 0.796248    \nd(L(IDE, 1)) -1.40786    0.48867  -2.881 0.006160 ** \nect          -0.41685    0.07849  -5.311 3.63e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01819 on 43 degrees of freedom\n  (0 observations deleted due to missingness)\nMultiple R-squared:  0.7613,\tAdjusted R-squared:  0.7113 \nF-statistic: 15.24 on 9 and 43 DF,  p-value: 9.545e-11\n```\n\n\n:::\n:::\n\n\n\nFinally, we can test the stability of the coefficients of the ARDL(3,1,3,2) model. As discussed earlier @fig-\n\n\nLetâ€™s test if there is a long-run levels relationship (cointegration) using the bounds test from Pesaran et al. (2001).\n\n# The bounds F-test (under the case 2) rejects the NULL hypothesis (let's say, assuming alpha = 0.01) with p-value = 0.004418.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbounds_f_test(ardl_3132, case = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tBounds F-test (Wald) for no cointegration\n\ndata:  d(LRM) ~ L(LRM, 1) + L(LRY, 1) + L(IBO, 1) + L(IDE, 1) + d(L(LRM,     1)) + d(L(LRM, 2)) + d(LRY) + d(IBO) + d(L(IBO, 1)) + d(L(IBO,     2)) + d(IDE) + d(L(IDE, 1))\nF = 5.1168, p-value = 0.004418\nalternative hypothesis: Possible cointegration\nnull values:\n   k    T \n   3 1000 \n```\n\n\n:::\n:::\n\n\n\nThe bounds F-test rejects the NULL hypothesis of no cointegration. Therefore, we can conclude that there is a long-run relationship between the series.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The bounds F-test (under the case 3) rejects the NULL hypothesis (let's say, assuming alpha = 0.01) with p-value = 0.004418.\nbounds_f_test(ardl_3132, case = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tBounds F-test (Wald) for no cointegration\n\ndata:  d(LRM) ~ L(LRM, 1) + L(LRY, 1) + L(IBO, 1) + L(IDE, 1) + d(L(LRM,     1)) + d(L(LRM, 2)) + d(LRY) + d(IBO) + d(L(IBO, 1)) + d(L(IBO,     2)) + d(IDE) + d(L(IDE, 1))\nF = 6.2059, p-value = 0.004146\nalternative hypothesis: Possible cointegration\nnull values:\n   k    T \n   3 1000 \n```\n\n\n:::\n\n```{.r .cell-code}\n# The bounds t-test (under the case 3) rejects the NULL hypothesis (let's say, assuming alpha = 0.01) with p-value = 0.005538.\n# We also provide the critical value bounds for alpha = 0.01.\ntbounds <- bounds_t_test(uecm_3132, case = 3, alpha = 0.01)\ntbounds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tBounds t-test for no cointegration\n\ndata:  d(LRM) ~ L(LRM, 1) + L(LRY, 1) + L(IBO, 1) + L(IDE, 1) + d(L(LRM,     1)) + d(L(LRM, 2)) + d(LRY) + d(IBO) + d(L(IBO, 1)) + d(L(IBO,     2)) + d(IDE) + d(L(IDE, 1))\nt = -4.5479, Lower-bound I(0) = -3.4430, Upper-bound I(1) = -4.3799,\np-value = 0.005538\nalternative hypothesis: Possible cointegration\nnull values:\n   k    T \n   3 1000 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntbounds$tab\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  statistic Lower-bound I(0) Upper-bound I(1) alpha     p.value\nt -4.547939        -3.442978        -4.379886  0.01 0.005538316\n```\n\n\n:::\n:::\n\n\n\n\nHere we have the short-run and the long-run multipliers (with standard errors, t-statistics and p-values).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultipliers(ardl_3132, type = \"sr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Term   Estimate Std. Error    t value     Pr(>|t|)\n1 (Intercept)  2.6201916  0.5677679  4.6148990 4.186867e-05\n2         LRY  0.6727993  0.1311638  5.1294603 8.317401e-06\n3         IBO -1.0785180  0.3217011 -3.3525465 1.790030e-03\n4         IDE  0.1254643  0.5544522  0.2262852 8.221614e-01\n```\n\n\n:::\n:::\n\n\n\n\nWe can also estimate and visualize the delay multipliers along with their standard errors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmult15 <- multipliers(ardl_3132, type = 15, se = TRUE)\nplot_delay(mult15, interval = 0.95)\n```\n\n::: {.cell-output-display}\n![](ardl_denmark_files/figure-typst/unnamed-chunk-10-1.svg)\n:::\n:::\n\n\n\nNow letâ€™s graphically check the estimated long-run relationship (cointegrating equation) against the dependent variable LRM.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nce <- coint_eq(ardl_3132, case = 2)\nplot_lr(ardl_3132, coint_eq = ce, show.legend = TRUE)\n```\n\n::: {.cell-output-display}\n![](ardl_denmark_files/figure-typst/unnamed-chunk-11-1.svg)\n:::\n:::\n\n\n\nFinally, we can forecast the dependent variable LRM using the ARDL(3,1,3,2) model.\n\nForecasting and using an ardl, uecm, or recm model in other functions are easy as they can be converted in regular lm models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nardl_3132_lm <- to_lm(ardl_3132)\n\n# Forecast using the in-sample data\ninsample_data <- ardl_3132$model\npredicted_values <- predict(ardl_3132_lm, newdata = insample_data)\n\n# Convert to ts class for the plot\npredicted_values <- ts(predicted_values, start = c(1974,4), frequency=4)\nplot(denmark$LRM, lwd=2) #The input dependent variable\nlines(predicted_values, col=\"red\", lwd=2) #The predicted values\n```\n\n::: {.cell-output-display}\n![The red line represents the forecasted values of the dependent variable LRM using the ARDL(3,1,3,2) model.](ardl_denmark_files/figure-typst/fig-multipliers-1.svg){#fig-multipliers}\n:::\n:::\n\n\n\nAs per @fig-multipliers, the red line represents the forecasted values of the dependent variable LRM using the ARDL(3,1,3,2) model. Similarly we do this in @sec-ease-of-use.\n\n\n## Ease of use \nLetâ€™s see what it takes to build the above ARDL(3,1,3,2) model.\n\nUsing the ARDL package (literally one line of code):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nardl_model <- ardl(LRM ~ LRY + IBO + IDE, data = denmark, order = c(3,1,3,2))\n```\n:::\n\n\n\n\nWithout the ARDL package:\n(Using the dynlm package, because striving with the lm function would require extra data transformation to behave like time-series)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dynlm)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: zoo\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'zoo'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n\n\n:::\n\n```{.r .cell-code}\ndynlm_ardl_model <- dynlm(LRM ~ L(LRM, 1) + L(LRM, 2) + L(LRM, 3) + LRY + L(LRY, 1) +\n                           IBO + L(IBO, 1) + L(IBO, 2) + L(IBO, 3) +\n                           IDE + L(IDE, 1) + L(IDE, 2), data = denmark)\nidentical(ardl_model$coefficients, dynlm_ardl_model$coefficients)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nAn ARDL model has a relatively simple structure, although the difference in typing effort is noticeable. @fig-multipliers shows the multipliers of the ARDL(3,1,3,2) model.\n\nNot to mention the complex transformation for an ECM. The extra typing is the least of your problems trying to do this. First you would need to figure out the exact structure of the model!\n\nUsing the ARDL package (literally one line of code):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuecm_model <- uecm(ardl_model)\n```\n:::\n\n\n\nWithout the ARDL package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndynlm_uecm_model <- dynlm(d(LRM) ~ L(LRM, 1) + L(LRY, 1) + L(IBO, 1) +\n                                   L(IDE, 1) + d(L(LRM, 1)) + d(L(LRM, 2)) +\n                                   d(LRY) + d(IBO) + d(L(IBO, 1)) + d(L(IBO, 2)) +\n                                   d(IDE) + d(L(IDE, 1)), data = denmark)\nidentical(uecm_model$coefficients, dynlm_uecm_model$coefficients)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n",
    "supporting": [
      "ardl_denmark_files\\figure-typst"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}