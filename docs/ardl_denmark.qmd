---
title: "ARDL Model for Denmark"
format: typst
---

## Basic Example

This is a basic example which shows how to use the main functions of the ARDL package.

Assume that we want to model the LRM (logarithm of real money, M2) as a function of LRY, IBO and IDE (see ?denmark). The problem is that applying an OLS regression on non-stationary data would result into a spurious regression. The estimated parameters would be consistent only if the series were cointegrated.

```{r}
library(ARDL)
data(denmark)
```

First, we find the best ARDL specification. We search up to order 5.

```{r}
models <- auto_ardl(LRM ~ LRY + IBO + IDE, data = denmark, max_order = 5)

# The top 20 models according to the AIC
models$top_orders

```

The best model is the one with the lowest AIC. We can also plot the AIC values for each model.

```{r}
# The best model was found to be the ARDL(3,1,3,2)
ardl_3132 <- models$best_model
ardl_3132$order
#> LRM LRY IBO IDE 
#>   3   1   3   2
summary(ardl_3132)
```

Then we can estimate the UECM (Unrestricted Error Correction Model) of the underlying ARDL(3,1,3,2).

```{r}
uecm_3132 <- uecm(ardl_3132)
summary(uecm_3132)

```

And also the RECM (Restricted Error Correction Model) of the underlying ARDL(3,1,3,2), allowing the constant to join the long-run relationship (case 2), instead of the short-run (case 3).

```{r}
recm_3132 <- recm(uecm_3132, case = 2)
summary(recm_3132)
```

Finally, we can test the stability of the coefficients of the ARDL(3,1,3,2) model. As discussed earlier @fig-

Let’s test if there is a long-run levels relationship (cointegration) using the bounds test from Pesaran et al. (2001).

# The bounds F-test (under the case 2) rejects the NULL hypothesis (let's say, assuming alpha = 0.01) with p-value = 0.004418.

```{r}
bounds_f_test(ardl_3132, case = 2)
```

The bounds F-test rejects the NULL hypothesis of no cointegration. Therefore, we can conclude that there is a long-run relationship between the series.

```{r}
# The bounds F-test (under the case 3) rejects the NULL hypothesis (let's say, assuming alpha = 0.01) with p-value = 0.004418.
bounds_f_test(ardl_3132, case = 3)
# The bounds t-test (under the case 3) rejects the NULL hypothesis (let's say, assuming alpha = 0.01) with p-value = 0.005538.
# We also provide the critical value bounds for alpha = 0.01.
tbounds <- bounds_t_test(uecm_3132, case = 3, alpha = 0.01)
tbounds
```

```{r}
tbounds$tab
```

Here we have the short-run and the long-run multipliers (with standard errors, t-statistics and p-values).

```{r}

multipliers(ardl_3132, type = "sr")

```

We can also estimate and visualize the delay multipliers along with their standard errors.

```{r}

mult15 <- multipliers(ardl_3132, type = 15, se = TRUE)
plot_delay(mult15, interval = 0.95)
```

Now let’s graphically check the estimated long-run relationship (cointegrating equation) against the dependent variable LRM.

```{r}
ce <- coint_eq(ardl_3132, case = 2)
plot_lr(ardl_3132, coint_eq = ce, show.legend = TRUE)
```

Finally, we can forecast the dependent variable LRM using the ARDL(3,1,3,2) model.

Forecasting and using an ardl, uecm, or recm model in other functions are easy as they can be converted in regular lm models.

```{r}
#| label: fig-multipliers
#| fig.cap: "The red line represents the forecasted values of the dependent variable LRM using the ARDL(3,1,3,2) model." 
#| 
ardl_3132_lm <- to_lm(ardl_3132)

# Forecast using the in-sample data
insample_data <- ardl_3132$model
predicted_values <- predict(ardl_3132_lm, newdata = insample_data)

# Convert to ts class for the plot
predicted_values <- ts(predicted_values, start = c(1974,4), frequency=4)
plot(denmark$LRM, lwd=2) #The input dependent variable
lines(predicted_values, col="red", lwd=2) #The predicted values
```

As per @fig-multipliers, the red line represents the forecasted values of the dependent variable LRM using the ARDL(3,1,3,2) model. Similarly we do this in @sec-ease-of-use.

## Ease of use

Let’s see what it takes to build the above ARDL(3,1,3,2) model.

Using the ARDL package (literally one line of code):

```{r}
ardl_model <- ardl(LRM ~ LRY + IBO + IDE, data = denmark, order = c(3,1,3,2))
```

Without the ARDL package: (Using the dynlm package, because striving with the lm function would require extra data transformation to behave like time-series)

```{r}
library(dynlm)

dynlm_ardl_model <- dynlm(LRM ~ L(LRM, 1) + L(LRM, 2) + L(LRM, 3) + LRY + L(LRY, 1) +
                           IBO + L(IBO, 1) + L(IBO, 2) + L(IBO, 3) +
                           IDE + L(IDE, 1) + L(IDE, 2), data = denmark)
identical(ardl_model$coefficients, dynlm_ardl_model$coefficients)
```

An ARDL model has a relatively simple structure, although the difference in typing effort is noticeable. @fig-multipliers shows the multipliers of the ARDL(3,1,3,2) model.

Not to mention the complex transformation for an ECM. The extra typing is the least of your problems trying to do this. First you would need to figure out the exact structure of the model!

Using the ARDL package (literally one line of code):

```{r}
uecm_model <- uecm(ardl_model)
```

Without the ARDL package:

```{r}
dynlm_uecm_model <- dynlm(d(LRM) ~ L(LRM, 1) + L(LRY, 1) + L(IBO, 1) +
                                   L(IDE, 1) + d(L(LRM, 1)) + d(L(LRM, 2)) +
                                   d(LRY) + d(IBO) + d(L(IBO, 1)) + d(L(IBO, 2)) +
                                   d(IDE) + d(L(IDE, 1)), data = denmark)
identical(uecm_model$coefficients, dynlm_uecm_model$coefficients)
```
